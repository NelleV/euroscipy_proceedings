:author: Sepideh Alassi
:email: sepideh.alassi@iis.fraunhofer.de
:institution: Fraunhofer IIS

:author: Bertram Winter
:email: Bertram.Winter@ams.com
:institution: ams AG


------------------------------------------------
PyCells for an Open Semiconductor Industory
------------------------------------------------

.. class:: abstract

	In modern semiconductor industory, automatic generation of parameterized and recurring layout structures plays an important role, and should be present as a feature in Electronic Desin Automation (EDA)-tools.
	
	Currently these layout generators are developed with a proprietary programming language, and can be used with a specific EDA-tool. Therefore the semiconductor companies appeal the development of the layout generators that can be used in all state of the art EDA-tools which support OpenAccess database.
	
	This project is about developing these layout generators with Python, PyCells, with the help of Python API library for all transistors, resistors, and capacitors of ams technologies. The PyCells not only have preserved all the features of a comprehensive layout generator, but also optimized the compuational performance.
	
	
.. class:: keywords

   PyCells, Semiconductor, OpenAccess

Introduction
------------
The number of companies active in modern semiconductor business is increasing every day which raises the demand for cheaper EDA-tools. However on the other hand, one of the main steps of designing an integrated circuit is drawing the physical structure of it, the layout. Thus the EDA-tools should have a feature for automatic generation of parametrized, recurring structures as pre-defined layouts in a library. The layout generators which are presently in use are developed by a proprietary language, SKILL and are just to be used as a feature of a specific EDA-tool which is rather expensive. On the other hand, the second major drawback of using this proprietary EDA-tool is that the semiconductor manfactureres are not able to support the customers in optimal way because the designs are not interoperable. Hence, instead of using this kind of proprietary database for EDA design, the use of an open standard for an EDA database also allows chip designers to work on the same chip-design using tools, which can have more affordable prices, from different EDA vendors. 

The aim of this project is developing interoperable layout generators with Python (PyCells), for H35, C35, and S35 technoloies of ams AG, that can be used by any EDA-tool which supports OpenAccess database, the OpenAccess database will be further explained in next section. For a certain set of parameters, PyCells should generate layouts identical to those generated by SKILL codes (PCells). Furthermore, extra interactive features such as stretching and auto-abutment are added to PyCells which are verified to be accurate and optimized with respect to performance.        


Development
-----------

OpenAceess [OpenAccess]_ has been established as standard for storing design data in the semiconductor industry and builds the foundation for interoperability of EDA-tools. OpenAccess is a file based database and manages logical design data (schematics) as well as artwork data for manufacturing (layout). The reference implementation for accessing design data within the database is written in C++. The company Ciranova (now acquired by Synopsys ) developed a Python wrapper [PythonAPI]_ for the OpenAccess C++ class library with the goal to access and modify design data through Python. Additionally they provide an integrated development environment [PyCellStudio]_ that enables interactive development and debugging of Python code, while the effects on the design data are shown directly in a separated window.

In our development, we have used Python API library to write Python codes, which generate recurring layout structures based on a given set of parameters. Typical recurring structures are primitive devices that are used in integrated circuit design like resistors, capacitors and transistors. The electrical properties of these devices (resistance, capacitance and e. g. transistor transconductance) are brought down to geometric dimensions (e. g. width and length) which serve as parameters for the Python scripts. The object oriented nature of Python fits very well for this task as shown in the following example:

A typical CMOS semiconductor process offers n-channel and p-channel transistors. Each of these transistor types can have multiple voltage ratings (e. g. 5V, 20V, 50V 120V), which then again result in different layout structures. Generally speaking each transistor has similar gate, source and drain structures, but has eventually different doping concentrations for the implant regions of the semiconductor material and different protection structures, which need to be reflected in the layout. Therefore we created a set of base classes in Python from which the more specialized transistors inherit common structures, while adding only structures dedicated to this type of transistor. This approach reduces duplicate code and makes maintaining the scripts more intuitive when the number of devices gets large. Finally the Python scripts are compiled to byte-code and stored inside the OpenAccess library. A plugin of the OpenAccess database takes care to load the correct script when a parameter of the corresponding device is touched. 


 
Stretching
----------

Besides the basic feature, of specifying parameters for recurring structures, the Python API offers also more enhanced interactive features with the EDA-tool [PythonAPI]_. Stretching which is one of these features allows changing parameters of an instance interactively. This helps the engineer to fit instances of an analog design into the available space, without affecting the electrical properties of the instance. For example the capacitance value of a capacitor depends to a large extend on its area. Therefore the shape can be varied while maintaining a constant area. The stretching is shown for a rectangular capacitor in figure :ref:`capfig`:

.. math::
   :label: capequ

   C \propto W \cdot L
   
.. figure:: stretch_cap.pdf
   :scale: 80%
   :align: center
   
   Stretching of a capacitor by changing L and W ratio, but keeping its area constant. :label:`capfig`


The electrical properties of resistors and transistors are proportional to the ratio of length and width:

.. math::
   :label: resequ

   R \propto \frac{L}{W}
   
.. math::
   :label: tranequ

   g_m \propto \frac{W}{L}
   
Therefore one can not simply fit them into a given shape, without affecting the behaviour of the design. One option is to allow the resistors to have bends (as shown in figure :ref:`resfig`) or to change the number of fingers of transistors (see figure :ref:`transfig`), or to stretch the gate of a transistor (see figure :ref:`stretchgate`).
      
.. figure:: stretch_res.pdf
   :scale: 80%
   :align: center
   
   Stretching of a resistor by bending the device in a snake structure, but keeping length and width constant. :label:`resfig`
   
   
.. figure:: stretch_mos.pdf
   :scale: 80%
   :align: center
   
   Stretching of a transistor by increasing the number of fingers, but keeping the gate to source/drain edge constant. :label:`transfig`
   
.. figure:: stretch_gate.pdf
   :scale: 80%
   :align: center
   
   Stretching the gate of a transistor :ref:`stretchgate`
   
All these features can be recognized by making the PyCells stretchable. The stretch handles are stored as properties in the OpenAccess database and are defined within the Python source code. The stretch handles have to be associated to the shape and parameters of the layout. Stretching can be limited to horizontal or vertical direction. Also minimal and maximal limits, as well as a snap resolution can be specified. An example of a stretch handle definition is shown below:

.. code-block:: python
   
   stretchHandle( 
       name = 'width_handle_left',
       shape = poly1GateShape,
	   parameter = 'wtot',
	   location = CENTER_LEFT,
	   direction = EAST_WEST,
	   stretchType = 'relative',
	   minVal = 0.4,
	   maxVal = 10000.0
   )

The layout tool displays then the stretch handles as small diamonds, which can be dragged by the engineer graphically to change the parameter value using the mouse. When releasing the stretch handle, the Python code is automatically invoked and the layout structure is adapted according to the new values of parameters.


Abutment
--------

Another advanced feature is auto-abutment. Abutment is used to make the layout more compact. When placing two instances next to each other, the layout can be adapted in a way that common structures are shared between the instances. This minimizes the layout area and two instances appear to be merged. Similar to stretching, auto-abutment is defined by additional properties associated with shapes in the OpenAccess database. In Python, abutment can be defined for a shape by using the autoAbutment() function: 
	
.. code-block:: python

    autoAbutment(
        shape = drain,
        pinSize = self.w,
        directions = [WEST],
        abutClass = 'mos_drain',
        abut2PinEqual = [{'spacing': 0.0},
            {'diffLeftStyle': 'DiffHalf'},
            {'diffLeftStyle': 'DiffHalf'}],
        abut2PinBigger = [{'spacing': 0.0},
            {'diffLeftStyle': 'DiffEdgeAbut'},
            {'diffLeftStyle': 'DiffEdgeAbut'}],
        abut3PinBigger = [{'spacing': 0.0},
            {'diffLeftStyle': 'ContactEdgeAbut2'},
            {'diffLeftStyle': 'ContactEdgeAbut2'}],
        abut3PinEqual = [{'spacing': 0.0},
            {'diffLeftStyle': 'DiffAbut'},
            {'diffLeftStyle': 'ContactEdgeAbut2'}],
        abut2PinSmaller = [{'spacing': 0.0},
            {'diffLeftStyle': 'DiffEdgeAbut'},
            {'diffLeftStyle': 'DiffEdgeAbut'}],
        abut3PinSmaller = [{'spacing': 0.0},
            {'diffLeftStyle': 'DiffEdgeAbut'},
            {'diffLeftStyle': 'DiffEdgeAbut'}],
        noAbut = [{'spacing': 0.4 }]
    )
	
This function provides variety of parameters to define which attributes are compatible for abutment. Only instances that have common layout structures can be merged. Furthermore, there are several function parameters to specify different types of abutment, for example in cases where the instances have common structures but are in different size. It is also important to take logical information of the design into account, as it is only allowed to merge structures which are logically connected (i. e. having the same net). The resulting layout can be further diminished, when the two instances are the only ones connected to the net. In this case the structures between the two instance, that would allow to connect to the net, can be omitted. The abutment process is shown in figure :ref:`abutment` and figure :ref:`abutfig` depicts different case of abutment.

.. figure:: abutment.pdf
	   :scale: 80%
	   :align: center
   
	   Abutment of two transistors :label:`abutment` 

.. figure:: abut_mos.pdf
	   :scale: 80%
	   :align: center
   
	   Abutment of two transistors: a) no abutment, as spacing between transistors is too large b) transistors abutted, but leave source/drain pin to connect to another instance c) transistors abutted, no connection to source/drain needed :label:`abutfig` 

In order to abut two transistors, the layout designer should drag one instance and place it in a way that the drain contacts overlap. Consequently the abutment feature of the PyCell is triggered and two instances will be merged. If one instance is relocated, each of the other instances gets its initial structure.

Verification
------------

The last but the most important part of the project is verifying the PyCells. We have considered four processes in order to verify the accuracy of PyCells: Design Rule Check (DRC), Layout Versus Schematic (LVS), Schematic Driven Layout (SDL), and database Comparison (DBCOMP).

Design Rule Check (DRC)
+++++++++++++++++++++++
The semiconductor manfacturers define a set of design rules for every technology with which the layout of every design must comply. Therefore all the layouts with various parameters which are generated by PyCells are checked for design rule violances in order to ensure the accuracy of them. A DRC verification software checks the layouts and highlights the violations of design rules, such as space between layers, overlapping of layers, the cases of missing layers, etc (see Figure :label:`DRC` ).
.. figure:: designrules.pdf
	   :scale: 80%
	   :align: center
   
	   Design Rule Check :label:`DRC` 
	
Layout versus Schematic (LVS)
+++++++++++++++++++++++++++++
The layout of a design should match the schematic of it with respect to type and number of devices, connections, as well as the topogical parameters. In this verification process, we ensure that the layout of a sample design which is generated by PyCells matches perfectly with the schematic of it. The LVS tool compares the layout and schematic of a design by extracting the netlists, according to design rules defined by semiconductor manfacturer, of layout and schematic in which the devices in design and their connections as well as topological parameters such as area, perimeter, etc are listed. After comparing the netlists, the LVS tool reports if the schematic and layout of the design match completely with respect to type and connection of devices as well as topology of them. It also reports the existance of fragmented nodes which appear if the connections are not identical in front- and back-end of the design.  

Schematic Driven Layout (SDL)
+++++++++++++++++++++++++++++
PyCell codes must include the definition of pins regarding type of connections, weak connection (by polysilicon) or strong connection (by metal), and also the definition of shapes that require exteranl connections. Having types of connections implemented in PyCells, the SDL Navigator tool can get the schematic of a sample design and generate the layout of it by calling PyCells with respective parameters. After generation of the layout, SDL Navigator checks the connectivity features using flylines.

Database Compararison (DBCOMP)
++++++++++++++++++++++++++++++
The last verification step is to substantiate the main aim of this project, generating layouts with Python (PyCells) exactly the same as the ones generated with SKILL (PCells). This verification process is in GDSII level and is done with help of a regression test, in which in a layout the PCells and PyCells of identical devices are instanced with a set of parameters, and the layouts are compared to be congruent.


Conclusion
------------

Believing in what Richard Stallman has said "Proprietary software is an injustice", we have successfully developed the layout generators for an open semiconductor industory, giving the designers who use ams technologies opportunity to work with any desired EDA-tools, to share their designs easily with others, and to receive the support they deserve. These PyCells are developed for all high and low voltage devices which enable the IC-designers to have advanced designs. Furthermore, by using these PyCells we have managed to reduce the compuattion time which is extremly important in semiconductor industory. PyCells for developed for ams AG technologies, have passed all the verification tests and are practically in use by customers.     


References
----------
.. [OpenAccess] What is OpenAccess?
        https://www.si2.org/?page=69
.. [PyCellAPI] J. Ivie. Ciranova Python API Reference Manual. Ciranova, Inc., 2009
.. [PyCellStudio] Synopsys PyCell Studio
		https://www.synopsys.com/
